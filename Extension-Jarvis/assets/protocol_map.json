{
  "Protocols": {
    "Protocol-analysis-protocols": {
      "map_protocols.py": {
        "Name": "map_protocols.py",
        "Description": "This creates the map file of all protocols in the system.",
        "Prerequisites": "None",
        "Inputs": "None",
        "Outputs": "protocol_mapping.json",
        "Tags": "protocol, mapping, json",
        "Subprotocols": "None",
        "Location": "Protocols/Protocol-analysis-protocols/map_protocols.py"
      },
      "get_related_protocols.py": {
        "Name": "get_related_protocols.py",
        "Description": "Extract related protocols from a protocol map based on the command details.",
        "Prerequisites": "Protocol map JSON file",
        "Inputs": "Command details",
        "Outputs": "Related protocols",
        "Tags": "Protocol, Analysis, Related, Map",
        "Subprotocols": "None",
        "Location": "Protocols/Protocol-analysis-protocols/get_related_protocols.py"
      }
    },
    "Other-protocols": {
      "template_protocol.py": {
        "Name": "template_protocol.py",
        "Description": "This is the template protocol",
        "Prerequisites": "None",
        "Inputs": "None",
        "Outputs": "None",
        "Tags": "template",
        "Subprotocols": "None",
        "Location": "Protocols/Other-protocols/template_protocol.py"
      }
    },
    "Audio-protocols": {
      "sound_activation.py": {
        "Name": "sound_activation.py",
        "Description": "This is the protocol to detect when a voice has been made then sends a message to the Google extension to press the mia voice button on the chatgpt tab",
        "Prerequisites": "Conversation GPT opened",
        "Inputs": "Sound from the microphone, message.start - to start the sound detection, message.stop - to stop the sound detection",
        "Outputs": "start_noise, end_noise to Conversation GPT",
        "Tags": "audio, voice, mia, chatgpt, google extension",
        "Subprotocols": "None",
        "Location": "Protocols/Audio-protocols/sound_activation.py"
      }
    }
  },
  "Background_Protocols": {
    "CommunicationProtocols": {
      "communicateWithMainHost": {
        "Name": "communicateWithMainHost",
        "Description": "This function is used to communicate with the main native host",
        "Prerequisites": "The main native host must be setup",
        "Inputs": "initialMessage (object) - The initial message to send to the main native host",
        "Outputs": "None",
        "Tags": "Communication, Native Messaging, Message, Messaging, Main Host, Background, Send Message, Receive Message, Handle Message",
        "Subprotocols": "Background_Protocols.CommunicationProtocols.sendMainHostMessage, Background_Protocols.CommunicationProtocols.handleMainHost",
        "Location": "Background_Protocols.CommunicationProtocols.communicateWithMainHost"
      },
      "sendnextMainHostNMessage": {
        "Name": "sendnextMainHostNMessage",
        "Description": "This function is used to temporarily override the keep_alive message and send a custom message to the main native host",
        "Prerequisites": "The main native host must be setup",
        "Inputs": "altMessage (object) - The custom message to send to the main native host",
        "Outputs": "Promise - Resolves when the override message is processed",
        "Tags": "Communication, Native Messaging, Main Host, Background, Send Message, Override Message",
        "Subprotocols": "Background_Protocols.CommunicationProtocols.sendMainHostMessage",
        "Location": "Background_Protocols.CommunicationProtocols.sendnextMainHostNMessage"
      },
      "sendMainHostMessage": {
        "Name": "sendMainHostMessage",
        "Description": "This function is used to send a message to the main native host",
        "Prerequisites": "The main native host must be setup",
        "Inputs": "message (object) - The message to send to the main native host",
        "Outputs": "Promise - Resolves with the response from the main native host",
        "Tags": "Communication, Native Messaging, Message, Messaging, Main Host, Background, Send Message",
        "Subprotocols": "None",
        "Location": "Background_Protocols.CommunicationProtocols.sendMainHostMessage"
      },
      "sendMessageToSpecificTab": {
        "Name": "sendMessageToSpecificTab",
        "Description": "This function is used to send a message to a specific tab",
        "Prerequisites": "The tab must be open and accessible",
        "Inputs": "message (object) - The message to send to the tab",
        "Outputs": "Promise - Resolves with the response from the tab",
        "Tags": "Communication, Tabs, Message, Messaging, Background, Send Message, Receive Message, Handle Message",
        "Subprotocols": "Background_Protocols.CommunicationProtocols.handleTabMessages",
        "Location": "Background_Protocols.CommunicationProtocols.sendMessageToSpecificTab"
      }
    },
    "GeneralProtocols": {
      "openNewTab": {
        "Name": "openNewTab",
        "Description": "This function is used to open a new tab with a specific URL and name",
        "Prerequisites": "None",
        "Inputs": "new_tab_url (string) - The URL to open in the new tab",
        "Outputs": "Promise - Resolves with the tab ID of the new tab",
        "Tags": "Tabs, Communication, Background, Open Tab, New Tab, URL, Tab ID",
        "Subprotocols": "None",
        "Location": "Background_Protocols.GeneralProtocols.openNewTab"
      }
    }
  },
  "Tab_Protocols": {
    "ChatGPT_Protocols": {
      "utilityProtocols": {
        "observeForElement": {
          "Name": "observeForElement",
          "Description": "This function observes the DOM for the presence of an element matching the given selector.",
          "Prerequisites": "None",
          "Inputs": "Name of the element selector to observe, timeout duration in milliseconds (default: 15000ms)",
          "Outputs": "foundElement (Element) - The found element matching the selector",
          "Tags": "DOM, MutationObserver, Timeout, element, selector, observe, html",
          "Subprotocols": "None",
          "Location": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.observeForElement"
        },
        "clickVcRecordButton": {
          "Name": "clickVcRecordButton",
          "Description": "This function clicks the \"vc-record-button\" element in the DOM to start or stop recording audio.",
          "Prerequisites": "ChatGPT conversation is active and Mia extension is installed",
          "Inputs": "None",
          "Outputs": "None",
          "Tags": "DOM, Button, Click, Audio Recording, ChatGPT, Mia, Extension",
          "Subprotocols": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.observeForElement",
          "Location": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.clickVcRecordButton"
        },
        "observeForElementGone": {
          "Name": "observeForElementGone",
          "Description": "This function observes the DOM for the disappearance of an element matching the given selector.",
          "Prerequisites": "None",
          "Inputs": "Name of the element selector to observe, timeout duration in milliseconds (default: 60000ms)",
          "Outputs": "Boolean value indicating if the element disappeared within the timeout period",
          "Tags": "DOM, MutationObserver, Timeout, element, selector, disappearance, observe, html, gone",
          "Subprotocols": "None",
          "Location": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.observeForElementGone"
        },
        "extractGPTText": {
          "Name": "extractGPTText",
          "Description": "This function extracts the text content of a GPT response turn based on the turn number.",
          "Prerequisites": "ChatGPT conversation is active",
          "Inputs": "Turn number of the GPT response",
          "Outputs": "Text content of the GPT response turn",
          "Tags": "DOM, Text Extraction, GPT, ChatGPT",
          "Subprotocols": "None",
          "Location": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.extractGPTText"
        },
        "get_conversation_number": {
          "Name": "get_conversation_number",
          "Description": "This function retrieves the maximum turn number of the ChatGPT conversation.",
          "Prerequisites": "ChatGPT conversation is active",
          "Inputs": "None",
          "Outputs": "Maximum turn number of the conversation",
          "Tags": "DOM, ChatGPT, Conversation, Turn Number",
          "Subprotocols": "None",
          "Location": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.get_conversation_number"
        },
        "sendUserMessage": {
          "Name": "sendUserMessage",
          "Description": "This function sends a user message to the ChatGPT interface.",
          "Prerequisites": "ChatGPT conversation is active",
          "Inputs": "Text content of the user message to send",
          "Outputs": "None",
          "Tags": "DOM, User Message, ChatGPT, Message, Send Message",
          "Subprotocols": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.observeForElement, Tab_Protocols.ChatGPT_Protocols.utilityProtocols.observeForElementGone",
          "Location": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.sendUserMessage"
        },
        "observeGPTResponse": {
          "Name": "observeGPTResponse",
          "Description": "This function observes the ChatGPT conversation for GPT responses and extracts the text content.",
          "Prerequisites": "ChatGPT conversation is active",
          "Inputs": "None",
          "Outputs": "Text content of the GPT response",
          "Tags": "DOM, MutationObserver, GPT, ChatGPT, observe, response, text",
          "Subprotocols": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.observeForElement, Tab_Protocols.ChatGPT_Protocols.utilityProtocols.observeForElementGone, Tab_Protocols.ChatGPT_Protocols.utilityProtocols.extractGPTText, Tab_Protocols.ChatGPT_Protocols.utilityProtocols.get_conversation_number",
          "Location": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.observeGPTResponse"
        },
        "observeUserMessages": {
          "Name": "observeUserMessages",
          "Description": "This function observes the ChatGPT conversation for user messages and extracts the text content.",
          "Prerequisites": "ChatGPT conversation is active",
          "Inputs": "None",
          "Outputs": "Text content of the user message",
          "Tags": "DOM, MutationObserver, User Message, ChatGPT, observe, message, text",
          "Subprotocols": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.observeForElement",
          "Location": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.observeUserMessages"
        },
        "waitForStableDOM": {
          "Name": "waitForStableDOM",
          "Description": "This function waits for the DOM to stabilize by observing changes over a period of time.",
          "Prerequisites": "None",
          "Inputs": "Timeout duration in milliseconds (default: 5000ms), check interval in milliseconds (default: 500ms)",
          "Outputs": "Promise that resolves when the DOM is stable",
          "Tags": "DOM, MutationObserver, Promise, Timeout, Stability",
          "Subprotocols": "None",
          "Location": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.waitForStableDOM"
        },
        "getTabId": {
          "Name": "getTabId",
          "Description": "This function retrieves the unique tab ID of the current tab.",
          "Prerequisites": "None",
          "Inputs": "None",
          "Outputs": "Tab ID of the current tab",
          "Tags": "Tab ID, Tab Information, Retrieval",
          "Subprotocols": "Tab_Protocols.GeneralProtocols.utilityProtocols.send_request_message",
          "Location": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.getTabId"
        }
      },
      "noiseProtocol": {
        "handleStartNoise": {
          "Name": "handleStartNoise",
          "Description": "This function handles the start noise event by clicking the vc-record-button to start recording.",
          "Prerequisites": "ChatGPT conversation is active and Mia extension is installed",
          "Inputs": "None",
          "Outputs": "None",
          "Tags": "Noise Detection, Audio Recording, ChatGPT",
          "Subprotocols": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.clickVcRecordButton",
          "Location": "Tab_Protocols.ChatGPT_Protocols.noiseProtocol.handleStartNoise"
        },
        "handleEndNoise": {
          "Name": "handleEndNoise",
          "Description": "This function handles the end noise event by clicking the vc-record-button to stop recording.",
          "Prerequisites": "ChatGPT conversation is active and Mia extension is installed",
          "Inputs": "None",
          "Outputs": "None",
          "Tags": "Noise Detection, Audio Recording, ChatGPT",
          "Subprotocols": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.clickVcRecordButton",
          "Location": "Tab_Protocols.ChatGPT_Protocols.noiseProtocol.handleEndNoise"
        }
      },
      "ConversationGPTProtocol": {
        "initialize_observer": {
          "Name": "initialize_observer",
          "Description": "This function sends an inital message to the ChatGPT interface to initialize the conversation then listens for GPT responses continuously.",
          "Prerequisites": "Conversation GPT tab is active",
          "Inputs": "None",
          "Outputs": "None",
          "Tags": "ChatGPT, Initialization, Instructions",
          "Subprotocols": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.sendUserMessage, Tab_Protocols.ChatGPT_Protocols.ConversationGPTProtocol.continuous_observerGPTResponse",
          "Location": "Tab_Protocols.ChatGPT_Protocols.ConversationGPTProtocol.initialize_observer"
        },
        "continuous_observerGPTResponse": {
          "Name": "continuous_observerGPTResponse",
          "Description": "This function continuously observes the ChatGPT conversation for GPT responses and handles them accordingly.",
          "Prerequisites": "Conversation GPT tab is active",
          "Inputs": "None",
          "Outputs": "None",
          "Tags": "ChatGPT, GPT Response, Observation",
          "Subprotocols": "Tab_Protocols.ChatGPT_Protocols.ConversationGPTProtocol.handleGPTResponse",
          "Location": "Tab_Protocols.ChatGPT_Protocols.ConversationGPTProtocol.continuous_observerGPTResponse"
        },
        "handleGPTResponse": {
          "Name": "handleGPTResponse",
          "Description": "This function handles the GPT response.",
          "Prerequisites": "Conversation GPT tab is active",
          "Inputs": "GPT response text",
          "Outputs": "None",
          "Tags": "ChatGPT, GPT Response, Command Detection",
          "Subprotocols": "Tab_Protocols.ChatGPT_Protocols.ConversationGPTProtocol.sendToProblemSolver",
          "Location": "Tab_Protocols.ChatGPT_Protocols.ConversationGPTProtocol.handleGPTResponse"
        },
        "sendToProblemSolver": {
          "Name": "sendToProblemSolver",
          "Description": "This function sends the detected command text to the Problem Solver GPT for further analysis and execution.",
          "Prerequisites": "Conversation GPT tab is active",
          "Inputs": "Command text extracted from the GPT response",
          "Outputs": "None",
          "Tags": "ChatGPT, Command Detection, Problem Solving",
          "Subprotocols": "None",
          "Location": "Tab_Protocols.ChatGPT_Protocols.ConversationGPTProtocol.sendToProblemSolver"
        }
      },
      "ProblemSolverGPTProtocol": {
        "initialize_observer": {
          "Name": "initialize_observer",
          "Description": "This function initialize_observers the Problem Solver GPT protocol by providing the necessary instructions to the user.",
          "Prerequisites": "Problem Solver GPT tab is open",
          "Inputs": "None",
          "Outputs": "None",
          "Tags": "ChatGPT, Initialization, Instructions",
          "Subprotocols": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.sendUserMessage, Tab_Protocols.ChatGPT_Protocols.ProblemSolverGPTProtocol.continuous_observerGPTResponse",
          "Location": "Tab_Protocols.ChatGPT_Protocols.ProblemSolverGPTProtocol.initialize_observer"
        },
        "continuous_observerGPTResponse": {
          "Name": "continuous_observerGPTResponse",
          "Description": "This function continuously observes the ChatGPT conversation for GPT responses and handles them accordingly.",
          "Prerequisites": "Problem Solver GPT tab is active",
          "Inputs": "None",
          "Outputs": "None",
          "Tags": "ChatGPT, GPT Response, Observation",
          "Subprotocols": "Tab_Protocols.ChatGPT_Protocols.ProblemSolverGPTProtocol.handleGPTResponse",
          "Location": "Tab_Protocols.ChatGPT_Protocols.ProblemSolverGPTProtocol.continuous_observerGPTResponse"
        },
        "handleGPTResponse": {
          "Name": "handleGPTResponse",
          "Description": "This function handles the GPT response by generating a protocol for execution.",
          "Prerequisites": "Problem Solver GPT tab is active",
          "Inputs": "GPT response text",
          "Outputs": "None",
          "Tags": "ChatGPT, GPT Response, Protocol Generation",
          "Subprotocols": "Tab_Protocols.ChatGPT_Protocols.ProblemSolverGPTProtocol.sendToProtocolGenerationGPT",
          "Location": "Tab_Protocols.ChatGPT_Protocols.ProblemSolverGPTProtocol.handleGPTResponse"
        },
        "sendToProtocolGenerationGPT": {
          "Name": "sendToProtocolGenerationGPT",
          "Description": "This function sends the detected command text to the Protocol Generation GPT for generating a protocol.",
          "Prerequisites": "Problem Solver GPT tab is active",
          "Inputs": "Command text extracted from the GPT response",
          "Outputs": "None",
          "Tags": "ChatGPT, Command Detection, Protocol Generation",
          "Subprotocols": "None",
          "Location": "Tab_Protocols.ChatGPT_Protocols.ProblemSolverGPTProtocol.sendToProtocolGenerationGPT"
        }
      },
      "ProtocolGenerationGPTProtocol": {
        "initialize_observer": {
          "Name": "initialize_observer",
          "Description": "This function initialize_observers the Protocol Generation GPT protocol by providing the necessary instructions to the user.",
          "Prerequisites": "Protocol Generation ChatGPT tab is active",
          "Inputs": "None",
          "Outputs": "None",
          "Tags": "ChatGPT, Initialization, Instructions",
          "Subprotocols": "Tab_Protocols.ChatGPT_Protocols.utilityProtocols.sendUserMessage, Tab_Protocols.ChatGPT_Protocols.ProtocolGenerationGPTProtocol.continuous_observerGPTResponse",
          "Location": "Tab_Protocols.ChatGPT_Protocols.ProtocolGenerationGPTProtocol.initialize_observer"
        },
        "continuous_observerGPTResponse": {
          "Name": "continuous_observerGPTResponse",
          "Description": "This function continuously observes the ChatGPT conversation for GPT responses and handles them accordingly.",
          "Prerequisites": "Protocol Generation GPT tab is active",
          "Inputs": "None",
          "Outputs": "None",
          "Tags": "ChatGPT, GPT Response, Observation",
          "Subprotocols": "Tab_Protocols.ChatGPT_Protocols.ProtocolGenerationGPTProtocol.handleGPTResponse",
          "Location": "Tab_Protocols.ChatGPT_Protocols.ProtocolGenerationGPTProtocol.continuous_observerGPTResponse"
        },
        "handleGPTResponse": {
          "Name": "handleGPTResponse",
          "Description": "This function handles the GPT response by generating a protocol for execution.",
          "Prerequisites": "Protocol Generation GPT tab is active",
          "Inputs": "GPT response text",
          "Outputs": "None",
          "Tags": "ChatGPT, GPT Response, Protocol Generation",
          "Subprotocols": "None",
          "Location": "Tab_Protocols.ChatGPT_Protocols.ProtocolGenerationGPTProtocol.handleGPTResponse"
        }
      }
    },
    "GeneralProtocols": {
      "utilityProtocols": {
        "send_request_message": {
          "Name": "send_request_message",
          "Description": "This function sends a message to the background script and waits for a response.",
          "Prerequisites": "None",
          "Inputs": "Message object with request details",
          "Outputs": "Response from the background script",
          "Tags": "Message Passing, Background Script, Communication",
          "Subprotocols": "None",
          "Location": "Tab_Protocols.GeneralProtocols.utilityProtocols.send_request_message"
        }
      },
      "Protocol_analysisProtocols": {
        "map_protocols": {
          "Name": "map_protocols",
          "Description": "This function sends a message to the protocol analysis module to start mapping protocols.",
          "Prerequisites": "None",
          "Inputs": "None",
          "Outputs": "None",
          "Tags": "Protocol Analysis, Mapping",
          "Subprotocols": "None",
          "Location": "Tab_Protocols.GeneralProtocols.Protocol_analysisProtocols.map_protocols"
        },
        "process_command_details": {
          "Name": "process_command_details",
          "Description": "This function processes the command details from the user input.",
          "Prerequisites": "None",
          "Inputs": "Command details",
          "Outputs": "Processed command details",
          "Tags": "Command Details, Processing",
          "Subprotocols": "None",
          "Location": "Tab_Protocols.GeneralProtocols.Protocol_analysisProtocols.process_command_details"
        },
        "get_asset_file": {
          "Name": "get_asset_file",
          "Description": "This function retrieves a file from the extension assets folder.",
          "Prerequisites": "None",
          "Inputs": "Folder name, File name",
          "Outputs": "File content as JSON object",
          "Tags": "File Retrieval, Extension Assets",
          "Subprotocols": "None",
          "Location": "Tab_Protocols.GeneralProtocols.Protocol_analysisProtocols.get_asset_file"
        },
        "get_protocol_map": {
          "Name": "get_protocol_map",
          "Description": "This function retrieves the protocol map from the local storage.",
          "Prerequisites": "None",
          "Inputs": "None",
          "Outputs": "Protocol map object",
          "Tags": "Protocol Analysis, Mapping, Local Storage",
          "Subprotocols": "None",
          "Location": "Tab_Protocols.GeneralProtocols.Protocol_analysisProtocols.get_protocol_map"
        },
        "check_command_is_executable": {
          "Name": "check_command_is_executable",
          "Description": "This function checks if the given command is executable based on the protocol map.",
          "Prerequisites": "Protocol map is available",
          "Inputs": "Command details",
          "Outputs": "Boolean value indicating if the command is executable",
          "Tags": "Protocol Analysis, Command Execution, Executability, Protocol Map",
          "Subprotocols": "Tab_Protocols.GeneralProtocols.Protocol_analysisProtocols.get_protocol_map",
          "Location": "Tab_Protocols.GeneralProtocols.Protocol_analysisProtocols.check_command_is_executable"
        },
        "get_related_protocols": {
          "Name": "get_related_protocols",
          "Description": "This function retrieves the related protocols based on the given command details.",
          "Prerequisites": "None",
          "Inputs": "Command details",
          "Outputs": "Array of related protocol objects",
          "Tags": "Protocol Analysis, Related Protocols, Protocol Map",
          "Subprotocols": "Tab_Protocols.GeneralProtocols.utilityProtocols.send_request_message, Tab_Protocols.GeneralProtocols.utilityProtocols.getTabId, Protocols/Protocol-analysis/get_related_protocols.py",
          "Location": "Tab_Protocols.GeneralProtocols.Protocol_analysisProtocols.get_related_protocols"
        }
      }
    }
  }
}